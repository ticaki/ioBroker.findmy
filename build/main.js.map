{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport iCloud from 'icloudjs';\nimport { iCloudFindMyService } from 'icloudjs/build/services/findMy';\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass Findmy extends utils.Adapter {\n    icloud: iCloud | undefined = undefined;\n    findMyService: iCloudFindMyService | undefined = undefined;\n    unload: boolean = false;\n    timeout: ioBroker.Timeout | undefined = undefined;\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'findmy',\n        });\n        this.on('ready', this.onReady.bind(this));\n        // this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n\n        // Reset the connection indicator during startup\n        this.setState('info.connection', false, true);\n\n        this.config.pollInterval =\n            Number.isNaN(this.config.pollInterval) || this.config.pollInterval < 1 ? 3 : this.config.pollInterval;\n        const username = this.config.username;\n        const password = this.config.password;\n        if (typeof username !== 'string' || username == '' || typeof password != 'string' || password == '') {\n            return;\n        }\n\n        this.icloud = new iCloud({\n            username: this.config.username,\n            password: this.config.password,\n            saveCredentials: false,\n            trustDevice: true,\n            authMethod: 'srp',\n            dataDirectory: '/opt/iobroker/iobroker-data',\n        });\n        await this.icloud.authenticate();\n        this.log.debug(this.icloud.status);\n        //if (this.icloud.status === 'MfaRequested') {\n        //    await icloud.provideMfaCode('123456');\n        //}\n        try {\n            await this.icloud.awaitReady;\n        } catch (error: any) {\n            return;\n        }\n        this.setState('info.connection', true, true);\n        this.findMyService = this.icloud.getService('findme');\n        this.endlessUpdater();\n    }\n    private endlessUpdater(): void {\n        this.timeout = this.setTimeout(\n            async () => {\n                if (this.unload) return;\n                if (!this.icloud || !this.findMyService) return;\n                await this.icloud.awaitReady;\n                this.findMyService = this.icloud.getService('findme');\n                await this.findMyService.refresh();\n                for (const device of this.findMyService.devices.values()) {\n                    this.log.debug(\n                        device.deviceInfo.name +\n                            '\\t' +\n                            Math.floor(device.deviceInfo.batteryLevel * 100) +\n                            '% ' +\n                            device.deviceInfo.batteryStatus,\n                    );\n                }\n\n                this.endlessUpdater();\n            },\n            (this.config.pollInterval || 1) * 60000,\n        );\n    }\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            this.unload = true;\n            this.setState('info.connection', false, true);\n\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    private async onMessage(obj: ioBroker.Message): Promise<void> {\n        if (typeof obj === 'object' && obj.message) {\n            if (obj.command === 'send') {\n                // e.g. send email or pushover or whatever\n                this.log.info('send command');\n\n                // Send response in callback if required\n                if (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n            }\n            switch (obj.command) {\n                case 'connect':\n                    {\n                        const username = obj.message.username;\n                        const password = obj.message.password;\n                        if (\n                            typeof username !== 'string' ||\n                            username == '' ||\n                            typeof password != 'string' ||\n                            password == ''\n                        ) {\n                            if (obj.callback) this.sendTo(obj.from, obj.command, 'Message wrong', obj.callback);\n                            return;\n                        } else this.log.debug(`user: ${username} password: ${password}`);\n\n                        this.icloud = new iCloud({\n                            username: username,\n                            password: password,\n                            saveCredentials: false,\n                            trustDevice: true,\n                            authMethod: 'srp',\n                            dataDirectory: '/opt/iobroker/iobroker-data',\n                        });\n                        await this.icloud.authenticate();\n                        this.log.debug(this.icloud.status);\n                        if (this.icloud.status === 'MfaRequested') {\n                            if (obj.callback)\n                                this.sendTo(obj.from, obj.command, 'Message done wait for secret', obj.callback);\n                        }\n                    }\n                    break;\n                case 'secret':\n                    {\n                        if (this.icloud) {\n                            await this.icloud.provideMfaCode(obj.message.secret);\n                            await this.icloud.awaitReady;\n                            this.log.debug('Hello, ' + this.icloud.accountInfo!.dsInfo.fullName);\n                        }\n                    }\n                    break;\n            }\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Findmy(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Findmy())();\n}\n"],
  "mappings": "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",
  "names": ["iCloud"]
}
